{
	// Place your ACM 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

  // 代码转换网址：
  // https://snippet-generator.app/

"Create cpp": {
"prefix": "ccpp",
"body": [
	"#include<bits/stdc++.h>",
	"using namespace std;",
	"#define int long long",
	"#define double long double",
	"#define endl \"\\n\"",
	"#define mod3 998244353",
	"#define mod7 1000000007",
	"const int N = 1e6 + 10;",
	"const double eps =1e-4;",
	"",
	"signed main(){",
	"    ios::sync_with_stdio(false);",
	"    cin.tie(0);cout.tie(0);",
	"    cout << fixed << setprecision(6);",
	"    ",
	"    ",
	"    ",
	"    return 0;",
	"}"
],
"description": "初始格式化"
},
"bool cmp": {
"prefix": "bcmp",
"body": [
	"bool cmp(int a, int b){",
	"    return a > b;",
	"}"
],
"description": "bool cmp"
},
"快速幂": {
"body": [
	"int fastPower(int a, int b, int mod/* 取模 */) {",
	"    int result = 1; // 初始化结果为1",
	"    a = a % mod; // 将a对m取模",
	"    while (b > 0) {",
	"        // 如果b的当前位是1，则将当前的a乘到result上",
	"        if (b & 1) { // 等价于 if (b % 2 == 1)",
	"            result *= a;",
	"\t\t\tresult %= mod;",
	"        }",
	"        // 将a平方，准备处理下一位",
	"        a *= a;",
	"\t\ta %= mod;",
	"        // b右移一位",
	"        b >>= 1; // 等价于 b = b / 2;",
	"    }",
	"    return result;",
	"}"
],
"prefix": "ksm",
"description": "快速幂函数，计算 a^b % m"
},
"10进制转x进制": {
	"body": [
		"string ten_to_x_base(int n,int x){",
		"\tstack<char> s;",
		"\tstring xs;",
		"\twhile (n > 0) {",
		"\t\tint tmp = n % x;",
		"\t\tif (tmp >= 10) {",
		"\t\t\ts.push('A' + tmp - 10);",
		"\t\t}",
		"\t\telse {",
		"\t\t\ts.push('0' + tmp - 0);",
		"\t\t}",
		"\t\tn /= x;",
		"\t}",
		"\twhile (!s.empty()) {",
		"\t\txs = xs + s.top();",
		"\t\ts.pop();",
		"\t}",
		"\treturn xs;",
		"}"
	],
	"prefix": "10tox",
	"description": "10进制转x进制"
},
"x进制转10进制": {
"body": [
	"int x_to_ten_base(int n,string s){",
	"    int sum = 0;",
	"    for (char x:s){",
	"        sum *= n;",
	"        if(x>='A'&&x<='Z'){",
	"            sum += (int) (x - 'A' + 10);",
	"        }",
	"        else",
	"            sum += (int)(x - '0');",
	"        ",
	"    }",
	"    return sum;",
	"}"
],
"prefix": "xto10",
"description": "x进制转10进制"
},
"整数二分": {
"body": [
	"int bin_search(int *a, int n, int x){  //a[0]～a[n-1]是单调递增的",
	"    int l = 0, r = n;              //注意：不是 n-1",
	"    while (l < r) {",
	"        int mid = (l + r)/2; ",
	"        //int mid = (l + r) >> 1;  ",
	"        if (a[mid] >= x)  r = mid;",
	"        else    l = mid + 1;",
	"    }                   //终止于left = right",
	"    return l;       //特殊情况：a[n-1] < x时，返回n",
	"}"
],
"prefix": "erfen_int",
"description": "整数二分"
},
"实数二分": {
"body": [
	"const double eps =1e-7;        //精度。如果下面用for，可以不要eps",
	"while(r - l > eps){     //for(int i = 0; i<100; i++){",
	"    double mid = (l + r)/2;",
	"    if (check(mid)) r = mid;           //判定，然后继续二分",
	"    else            l  = mid;",
	"}"
],
"prefix": "erfen_double",
"description": "实数二分"
},
"深搜": {
	"body": [
		"int vis[10010],n;",
		"void dfs(vector<int> g,int cnt){",
		"\tif(cnt == n){",
		"\t\tfor(int i = 0 ;i < n; i++){",
		"\t\t\tcout << g[i] << \" \";",
		"\t\t}",
		"\t\tcout  <<  endl;",
		"\t\treturn;",
		"\t}",
		"\tfor(int i = 1 ; i <= n; i++){",
		"\t\tif(vis[i]) continue;//已经标记就跳过",
		"\t\tg.push_back(i);",
		"\t\tvis[i] = 1;//标记",
		"\t\tdfs(g, cnt + 1);",
		"\t\tg.pop_back();",
		"\t\tvis[i] = 0;//取消标记",
		"\t}",
		"}"
	],
	"prefix": "dfs1",
	"description": "深搜"
},
"素数判断": {
	"body": [
		"bool isPrime(int x) {",
		"    if (x < 2)",
		"    {",
		"        return false;",
		"    }",
		"    //试除法",
		"    for (int i = 2; i <= x/i; i++)",
		"    {",
		"        if (x % i == 0) {",
		"            return false;",
		"        }",
		"    }",
		"    return true;",
		"}"
	],
	"prefix": "sushu",
	"description": "素数判断"
	},
	"siz并查集": {
	"body": [
		"vector<int> p(N);//我的父亲是谁",
		"vector<int> siz(N);//集合大小",
		"//初始化",
		"void init(int n){",
		"    for (int i = 1; i <= n; i++)",
		"    {",
		"        p[i] = i;//自己是自己的监护人",
		"        siz[i] = 1;",
		"    }",
		"    ",
		"}",
		"//找自己最上面的祖宗 近乎O(1)",
		"int find(int x){",
		"\tif(x != p[x]){",
		"        p[x] = find(p[x]);//路径压缩[better!]",
		"    }",
		"    return p[x];",
		"}",
		"//合并",
		"void merge(int u,int v){",
		"    int pu = find(u);",
		"    int pv = find(v);",
		"    if(pu!=pv){",
		"        siz[pv] += siz[pu];",
		"        p[pu] = pv;",
		"    }",
		"}",
		"void solve(){ ",
		"    int u,v;   ",
		"    merge(u,v); // 将u所在集合并到v所在集合",
		"    siz[find(u)]; // 查询u所在集合的大小",
		"}"
	],
	"prefix": "bcj1",
	"description": "siz并查集"
	},
	"素数判断Miller-Rabin算法": {
	"body": [
		"typedef long long ll;",
		"typedef unsigned long long ull; // 自然溢出",
		"typedef pair<int,int> PII;",
		"const int S = 50; // 测试数",
		"// 快速乘,防止乘法溢出longlong",
		"ll mult_mod(ll u,ll v,ll p){",
		"    return (u * v - ll((/*long*/ double)u * v / p) * p + p) % p;",
		"}",
		"// 快速幂",
		"ll fast_pow(ll x,ll y,ll mod){",
		"    ll res = 1;",
		"    x %= mod;",
		"    while(y){",
		"        if(y & 1) res = mult_mod(res,x,mod);",
		"        x = mult_mod(x,x,mod);",
		"        y >>= 1;",
		"    }",
		"    return res;",
		"}",
		"",
		"bool witness(ll a,ll n){",
		"    ll u = n - 1;",
		"    int t = 0;",
		"    // 计算t,u,对n-1一直除2,直到是奇数,剩下的奇数是u,除2次数是t",
		"    while(u & 1 == 0){u = u >> 1,t++;} ",
		"    ll x1,x2;",
		"    x1 = fast_pow(a,u,n); // 计算a^u",
		"    // 做t次平方",
		"    for(int i = 1;i <= t;i++){",
		"        x2 = fast_pow(x1,2,n); // 平方后的结果",
		"        // 二次探测定理",
		"        if(x2 == 1 && x1 != 1 && x1 != n - 1) return true; // 必然是合数",
		"        x1 = x2;",
		"    }",
		"    // 最后x1=a^n-1,费马小定理",
		"    if(x1 != 1) return true; // 必然是合数",
		"    return false;",
		"}",
		"",
		"int miller_rabin(ll n){",
		"    if(n < 2) return 0; // 小于2是合数",
		"    if(n == 2) return 1; // 2是质数",
		"    if(n % 2 == 0) return 0; // 偶数是合数",
		"    // 剩下做测试",
		"    for(int i = 0;i < S;i++){",
		"        ll a = rand() % (n - 1) + 1; // 随机一个a",
		"        if(witness(a,n)) return 0; // 测试",
		"    }",
		"    return 1;",
		"}",
		"",
		"int main(){",
		"    ios::sync_with_stdio(false);",
		"    cin.tie(0);",
		"    cout.tie(0);",
		"    cout << fixed << setprecision(6);",
		"    ll n;",
		"    cin >> n;",
		"    if(miller_rabin(n)){",
		"        cout << \"P\" << endl;",
		"    }",
		"    else{",
		"        cout << \"not P\" << endl;",
		"    }",
		"    return 0;",
		"}"
	],
	"prefix": "sushu2",
	"description": "素数判断Miller-Rabin算法"
}
}
